// Script to generate mock audio files for portfolio
// Run this once to create sample audio files

// Load environment variables from .env.local
require('dotenv').config({ path: '.env.local' });

const fs = require('fs');
const path = require('path');

// Sample texts for different voices
const SAMPLE_TEXTS = [
  "Hello! This is a sample audio generated by AI Voice Studio. Welcome to the future of voice synthesis!",
  "Welcome to our AI Voice Studio demo. This voice showcases the power of ElevenLabs technology.",
  "Thank you for trying our voice synthesis application. We hope you enjoy the experience!",
  "This is a demonstration of realistic AI-generated speech. The quality is truly remarkable.",
  "Experience the future of voice technology with our AI Voice Studio. Create amazing content today!"
];

const VOICE_IDS = [
  '21m00Tcm4TlvDq8ikWAM', // Rachel (popular ElevenLabs voice)
  'AZnzlk1XvdvUeBnXmlld', // Domi
  'EXAVITQu4vr4xnSDxMaL', // Bella
  'ErXwobaYiN019PkySvjV', // Antoni
  'VR6AewLTigWG4xSOukaG'  // Josh
];

async function generateMockAudio() {
  console.log('üéµ Generating mock audio files for portfolio...');
  
  // Debug: Show all environment variables
  console.log('üîç Environment Debug:', {
    ELEVENLABS_API_KEY: process.env.ELEVENLABS_API_KEY ? 'SET' : 'NOT SET',
    NEXT_PUBLIC_ELEVENLABS_API_KEY: process.env.NEXT_PUBLIC_ELEVENLABS_API_KEY ? 'SET' : 'NOT SET',
    NODE_ENV: process.env.NODE_ENV
  });
  
  // Check if API key is available
  const apiKey = process.env.ELEVENLABS_API_KEY;
  if (!apiKey) {
    console.log('‚ùå No ElevenLabs API key found. Please set ELEVENLABS_API_KEY environment variable.');
    console.log('üí° You can get a free API key from: https://elevenlabs.io/');
    console.log('üí° Create a .env.local file with: ELEVENLABS_API_KEY=your_key_here');
    console.log('üí° Or set it directly: export ELEVENLABS_API_KEY=your_key_here');
    return;
  }

  const publicDir = path.join(__dirname, '../public');
  
  // Create public directory if it doesn't exist
  if (!fs.existsSync(publicDir)) {
    fs.mkdirSync(publicDir, { recursive: true });
  }

  for (let i = 0; i < SAMPLE_TEXTS.length; i++) {
    try {
      console.log(`üé§ Generating audio ${i + 1}/${SAMPLE_TEXTS.length}...`);
      
      const response = await fetch(`https://api.elevenlabs.io/v1/text-to-speech/${VOICE_IDS[i]}`, {
        method: 'POST',
        headers: {
          'xi-api-key': apiKey,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          text: SAMPLE_TEXTS[i],
          model_id: 'eleven_monolingual_v1',
          voice_settings: {
            stability: 0.5,
            similarity_boost: 0.5,
            style: 0.0,
            use_speaker_boost: true,
          },
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const audioBuffer = await response.arrayBuffer();
      const fileName = `mock-audio-${i + 1}.mp3`;
      const filePath = path.join(publicDir, fileName);
      
      fs.writeFileSync(filePath, Buffer.from(audioBuffer));
      console.log(`‚úÖ Generated: ${fileName}`);
      
      // Add a small delay to avoid rate limiting
      await new Promise(resolve => setTimeout(resolve, 1000));
      
    } catch (error) {
      console.error(`‚ùå Error generating audio ${i + 1}:`, error.message);
    }
  }
  
  console.log('üéâ Mock audio generation complete!');
  console.log('üìÅ Files saved in: public/');
}

// Run the script
generateMockAudio().catch(console.error); 